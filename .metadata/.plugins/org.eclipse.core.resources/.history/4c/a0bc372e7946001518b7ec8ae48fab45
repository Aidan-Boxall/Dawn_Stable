import numpy as np
import scisoftpy as dnp
import scitbx.math as scm
from scitbx.matrix import col as Vector
from scitbx.matrix import sqr as Rotator
import pickle
import functions as f
import matplotlib.pyplot as plt

# from fluffy_latest import get_q
# from fixnexus import fix_scan_file
# import peak_finder as fp

data_dir='/dls/i16/data/2015/cm12169-3/'
cif = 'HoFe2_icsd_103499.cif'

with open("peaks.pkl", 'rb') as peakfile:
    peaks = pickle.load(peakfile)

with open("qs", "rb") as qfile:
    qs = pickle.load(qfile)

data =[]

for index, peak in enumerate(peaks):
    scan_number = peak[0][29:35]
    image_number = int(peak[0][-9:-4])
    dat = dnp.io.load(data_dir+'{}.dat'.format(scan_number),
                              warn=False)
    print qs[index]
    print

    x_axis = Vector((1.0, 0, 0))
    y_axis = Vector((0, 1.0, 0))
    z_axis = Vector((0,0,1.0))
    delta = dat.metadata['delta']+9.2
    eta = dat.metadata['eta']
    chi = dat.metadata['chi']
    
    phi = dat.kphi[image_number-1]+(dat.metadata.kphi-dat.metadata.phi)

    mom_trans = qs[index]
    eta_rot =  Rotator(scm.r3_rotation_axis_and_angle_as_matrix(-y_axis, eta, deg = True))#+ve eta as left handed rotations
    mom_trans = eta_rot*mom_trans
    chi_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(z_axis, -chi, deg = True))
    mom_trans = chi_rot*mom_trans
    phi_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(-y_axis, phi, deg = True))#+ve phi as left handed rotations
    mom_trans = phi_rot*mom_trans
    data.append(mom_trans)

data_angs= []
print 'Data combos'
for combo in combinations(data_tup, 2):
    dot = combo[0][0].normalize().dot(combo[1][0].normalize())
    data_angs.append((np.rad2deg(np.arccos(dot)), combo[0][1], combo[1][1], combo[0][0], combo[1][0]))
print 
 
print 'Theory combos'
group_angs = []
group = f.plot_by_hkl_group(cif, (1,1,3))
for combo in combinations(group, 2):
    dot = combo[0].normalize().dot(combo[1].normalize())
    group_angs.append(np.rad2deg(np.arccos(dot)))
 
oh_yeah=0
equal_chi = 0
equal_chi_cor=[]
for ang in data_angs:
    if ang[1]==ang[2]:
        equal_chi+=1
    for gang in group_angs:
        if ang[0]-0.5<gang<ang[0]+0.5:
            if ang[1]==ang[2]:
                equal_chi_cor.append(ang[3])
                equal_chi_cor.append(ang[4])
#             print 'oh yeah'
#             print ang, gang
#             print
            oh_yeah+=1
            break
group_angs = list(set(group_angs))
print "Theory angles", len(group_angs)
print "Angles:",len(data_angs)
print "Angles matched: ",oh_yeah
print "Angles at equal chi: ",equal_chi
print "Angles at equal chi matched",len(equal_chi_cor)
print f.find_2theta_nearest_by_hkl(cif, (1,1,3))
print len(group)
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
f.plot_vectors_as_arrows(data, fig, ax)
ax.set_xlim(-0.6,0.6)
ax.set_ylim(-0.6,0.6)
ax.set_zlim(-0.6,0.6)
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
 
f.plot_vectors_as_arrows(equal_chi_cor, fig, ax)
ax.set_xlim(-0.6,0.6)
ax.set_ylim(-0.6,0.6)
ax.set_zlim(-0.6,0.6)
 
U = rm.find_U_matrix(equal_chi_cor, mycrys, 8, refl='orient')#, angle_accuracy = 50)
# rm.rotate_list(U, data)
# fig = plt.figure()
# ax = fig.add_subplot(111, projection = '3d')
# f.plot_vectors_as_arrows(data, fig,ax)
# ax.set_xlim(-0.6,0.6)
# ax.set_ylim(-0.6,0.6)
# ax.set_zlim(-0.6,0.6)
plt.show()
f.plot_vectors_as_arrows(data)
plt.show()
