import scisoftpy as dnp
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import copy


def get_mean(indata):  # need custom functions as array is too large for numpy
    indata = indata.flatten()
    mean = sum(indata) / float(len(indata))
    return mean


def get_stddev(indata, mean):
    indata = indata.flatten()
    stdevlist = []
    for value in indata:
        stdevlist.append(value**2 - mean**2)
    stdev = np.sqrt((1 / float(len(indata) - 1)) * sum(stdevlist))
    return stdev


def get_max_list(workdata, mask):
    "Returns a list of current maxima in the 'workdata' image."
    maximum = np.max(workdata)
    maxpoints = np.where(workdata==maximum)
    maxcoords = zip(maxpoints[0],maxpoints[1])  # format into a list of xy coords
    maxcoordscopy = list(maxcoords)             # copy of list
#     for coords in maxcoords:
#         if not mask[coords]:                # if coords are in mask,
#             workdata[coords] = 0            #  remove them from workdata
#             maxcoordscopy.remove(coords)    #  remove them from list to return
    return maxcoordscopy

def remove_peaks(workdata, mask, max_list, peak_list):
    for item in max_list:
        peak_list.append(item)
        peak_mask = np.zeros(workdata.shape)
        up = 0
        while mask[(item[0] + up, item[1])]:
            try:
                peak_mask[(item[0] + up, item[1])] = 1
            except IndexError:
                break
            up+=1
        down = 0
        while mask[(item[0] - down, item[1])]:
            try:
                peak_mask[(item[0] - down, item[1])] = 1
            except IndexError:
                break
            down +=1
        left = 0
        while mask[(item[0], item[1] - left)]:
            try:
                peak_mask[(item[0], item[1] - left)] = 1
            except IndexError:
                break
            left +=1
        right = 0
        while mask[(item[0], item[1] + right)]:
            try:
                peak_mask[(item[0], item[1] + right)] = 1
            except IndexError:
                break
            right +=1
        for y in range(-down,up+1):
            for x in range(-left,right+1):
                peak_mask[(item[0] + y, item[1] + x)] = 1
        np.place(workdata, peak_mask, 0)
        np.place(mask, peak_mask, 0)
        return [workdata, mask, peak_list]

chi = None
kphi = None
sums = None
roi_sums = None
roi_key = 'roi7_sum'
path_index_orig = 521280
path_index_end =  521311
# path_index_end = 521311

for path_index in range(path_index_orig, path_index_end):
    try:
        dat = dnp.io.load('/dls/i16/data/2015/cm12169-3/{0:.0f}.dat'.format(
            path_index), warn=False)
    except ValueError:
        print '/dls/i16/data/2015/cm12169-3/{0:.0f}.dat'.format(path_index) + ' could not be found.'
    if chi is None:
        chi = np.array([[dat.metadata.chi]*len(dat.kphi)])
    else:
        chi = np.append(chi, np.array([[dat.metadata.chi]*len(dat.kphi)]), axis=0)
    if kphi is None:
        kphi = np.array([dat.kphi])
    else:
        kphi = np.append(kphi, [dat.kphi], axis=0)
    if sums is None:
        sums = np.array([dat.sum])
    else:
        sums = np.append(sums, [dat.sum], axis=0)
    if roi_key is not None:
        if roi_sums is None:
            roi_sums = np.array([dat[roi_key]])
        else:
            roi_sums = np.append(roi_sums, [dat[roi_key]], axis=0)
print 'Done creating sums data.'
print len(sums)

if roi_sums is None:
    # Define roi and sum it
    centre = (242,108)
    width = 16
    roi_sums = np.zeros(sums.shape)
    roi_max_pix = np.zeros(sums.shape)
    max_pix = np.zeros(sums.shape)
    for p in range(sums.shape[0]):
        print p
        for i in range(sums.shape[1]):
            im = dnp.io.load('/dls/i16/data/2015/cm12169-3/{0:.0f}-pilatus100k-files/00000_{1:05.0f}.tif'.format(path_index_orig+p, i), warn = False)
            data = im[0].transpose()
            roi = data[centre[0]-width/2:centre[0]+width/2][:]
            roi_sum = np.sum(roi)
            roi_sums[p][i] = roi_sum
            max_pix[p][i] = np.max(data)
            roi_max_pix[p][i] = np.max(roi)


def get_peak_list(data_array, expected_number_of_peaks=1):
    mean = get_mean(data_array)
    stddev = get_stddev(data_array, mean)
    shape = data_array.shape
    min_no_of_stddevs = 5
    while min_no_of_stddevs > 1:
        array = copy.deepcopy(data_array)
        mask = np.ones(shape)
        min_peak_height = mean + min_no_of_stddevs * stddev
        for x, sub_array in enumerate(array):
            for y, item in enumerate(sub_array):
                if item < min_peak_height:
                    array[x][y] = 0
                    mask[x][y] = 0
        max_list = get_max_list(array, mask)
        peak_list = []
        while len(max_list) != len(array.flatten()):
            new_data = remove_peaks(array, mask, max_list, peak_list)
            array = new_data[0]
            mask = new_data[1]
            peak_list = new_data[2]
            if len(peak_list) >= expected_number_of_peaks:
                break
            max_list = get_max_list(array, mask)
            print len(peak_list)
        if len(peak_list) >= expected_number_of_peaks:
            break
        min_no_of_stddevs -= 1
    if len(peak_list) == 0:
        raise Exception('No peaks found')
    return peak_list

peak_list = get_peak_list(roi_sums, 25)

name_index = 1
for peak in peak_list:
    im = dnp.io.load('/dls/i16/data/2015/cm12169-3/{0:.0f}-pilatus100k-files/00000_{1:05.0f}.tif'.format(path_index_orig+peak[0], peak[1]), warn=False)
    print roi_sums[peak], name_index, len(peak_list)
    plt.imshow(im[0])
    plt.show()
    name_index += 1


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(chi,kphi,roi_sums)
ax.set_xlabel('Chi Angle')
ax.set_ylabel('Kphi Angle')
ax.set_zlabel('ROI Sum')
plt.show()