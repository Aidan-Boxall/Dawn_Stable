import unittest


class TestUnit(unittest.TestCase):


    def test_plotting(self):
        import functions as f
        import Crystal as c
        import matplotlib.pyplot as plt
 
 
        mycrys = c.Crystal()
        mycrys.load_cif('NiCO3_icsd_61067.cif')
        mycrys2 = c.Crystal()
        mycrys2.load_cif('icsd_29288-Si.cif') 
        f.many_vector_plots(mycrys,10)
        f.many_stereographic_plots(mycrys,10)
        f.many_vector_plots(mycrys2)
        f.many_stereographic_plots(mycrys2)
        plt.show()

    def test_reflection_chioce(self):
        import reflection_choice as rc
        jython_code = rc.reflection_choice('HoFe2_icsd_103499.cif', print_choices=5, choose_option=1)
        print jython_code

    def test_peak_finder(self):
        import peak_finder as fp
        import matplotlib.pyplot as plt
        print fp.find_peaks('/dls/i16/data/2015/cm12169-3/', 521280, 521311, 6,
                          True, False, 'roi7_sum')
        plt.show()


    def test_finding_the_U_matrix(self):
        import scisoftpy as dnp
        import Crystal as c
        import functions as f
        import matplotlib.pyplot as plt
        import finding_the_rotation_matrix as rm
        import copy
        import scitbx.math as scm
        from scitbx.matrix import col as Vector
        from scitbx.matrix import sqr as Rotator
  
  
        def add_rot_error(vector):
            stddev = 0.1
#             rand_rotation_x = rm.Rotator(rm.Vector(1),stddev)#,dnp.random.normal(0,stddev))
#             rand_rotation_y = rm.Rotator(rm.Vector(0,1),-stddev)#, dnp.random.normal(0,stddev))
#             rand_rotation_z = rm.Rotator(rm.Vector(0,0,1),stddev)#,dnp.random.normal(0,stddev))
            rand_axis = Vector([dnp.random.random(),dnp.random.random(),dnp.random.random()])
            rand_rotation = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(rand_axis, stddev, deg=True))
            vector = rand_rotation * vector
            return vector
  
        def random_rotation():
            rand_rotation_x = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(Vector([1.0,0,0]) ,dnp.random.randint(0,361), deg=True))
            rand_rotation_y = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(Vector([0,1.0,0]),dnp.random.randint(0,361), deg=True))
            rand_rotation_z = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(Vector([0.0,0.0,1.0]),dnp.random.randint(0,361), deg=True))
            return rand_rotation_z*rand_rotation_y*rand_rotation_x
 
        def diff(U, data, vectors):
                """This is a function used to optimise the U matrix. It evaluates
                """
                data = rm.rotate_list(U, data)
                index_list=[]
                for i, dat in enumerate(data):
                    diffs = []
                    dat = dat
                    for j, vector in enumerate(vectors):
                        diffs.append((dat-vector).length())
                    index = diffs.index(min(dnp.abs(diffs)))
                    index_list.append(index)
                targets = [0]*len(data)
                for i, idx in enumerate(index_list):
                    targets[i] = vectors[idx]
                total = 0
                for i, dat in enumerate(data):
                    total += (dat - targets[i]).length()
                return total
        mycrys = c.Crystal()
        mycrys.load_cif('NiCO3_icsd_61067.cif')
        l = f.group_reflections(mycrys)
        vectors =[]
        l_index = dnp.random.randint(len(l))
        vectors = f.momentum_transfer_vectors(l[l_index], mycrys)
#         plt.show()
        all_vectors=[]
        for i, group in enumerate(l):
            all_g = f.momentum_transfer_vectors(group, mycrys)
            all_vectors += all_g
        fig = plt.figure()
        ax = fig.add_subplot(311, projection='3d')
        f.plot_vectors(all_vectors, fig, ax)
        all_vectors_copy = copy.deepcopy(all_vectors)
        dot = 0
        while dot<10**(-5) or 179.5<dot<180.5 or dot==None:
            i = dnp.random.randint(len(vectors))
            j=i
            k=i
            while i == j:
                    j = dnp.random.randint(len(vectors))
            while i==k or j==k:
                k = dnp.random.randint(len(vectors))
                if k!=j and k!=i:
                    if dnp.abs(180-dnp.rad2deg(dnp.arccos(vectors[k].normalize().dot(vectors[i].normalize()))))%180.0 < 1:
                        k=i
                    if dnp.abs(180-dnp.rad2deg(dnp.arccos(vectors[k].normalize().dot(vectors[j].normalize()))))%180.0 < 1:
                        k=j
            dot = dnp.rad2deg(dnp.arccos(vectors[i].normalize().dot(vectors[j].normalize())))
            print dot
        print l_index, i, j, k
        print l[l_index][i][0]
        print l[l_index][j][0]
        print l[l_index][k][0]
  
        mock_data = [vectors[i], vectors[j], vectors[k]]
        mock_data = [add_rot_error(dat) for dat in mock_data]
          
        rand_rot = random_rotation()
        mock_data = rm.rotate_list(rand_rot, mock_data)
          
        all_vectors_copy = rm.rotate_list(rand_rot, all_vectors_copy)
        ax = fig.add_subplot(312, projection='3d')
        f.plot_vectors(all_vectors_copy, fig, ax)
        U = rm.find_U_matrix(mock_data, mycrys, optimise_U=True)
        rotator = U
        difference = diff(U, all_vectors_copy, all_vectors)
        print 'diff', difference
        all_vectors_copy = rm.rotate_list(rotator, all_vectors_copy)
        ax = fig.add_subplot(313, projection='3d')
        f.plot_vectors(all_vectors_copy, fig, ax)
#         print 'Orientation', rand_rot
#         print 'U matrix', rotator
        plt.show()



if __name__ == '__main__':

    unittest.main()
