import scisoftpy as dnp

import Crystal as c
import functions as f


def two_theta_gap(index, grouped_reflections):
    group = grouped_reflections[index]
    current_2theta = group[0][4]
    gaps =[]
    try:
        previous_group = grouped_reflections[index-1]
        previous_2theta = previous_group[0][4]
        gaps.append(dnp.abs(current_2theta-previous_2theta))
    except IndexError:
        pass
    try:
        next_group = grouped_reflections[index+1]
        next_2theta = next_group[0][4]
        gaps.append(dnp.abs(current_2theta-next_2theta))
    except IndexError:
        pass
    return min(gaps)


def normalised_two_theta_gaps(grouped_reflections):
    two_theta_gaps = []
    for index, group in enumerate(grouped_reflections):
        two_theta_gaps.append(two_theta_gap(index, grouped_reflections))
    max_gap = max(two_theta_gaps)
    two_theta_gaps = [(gap/max_gap)*100.0 for gap in two_theta_gaps]
    return two_theta_gaps


mycrys = c.Crystal()
mycrys.load_cif('NiCO3_icsd_61067.cif')
grouped_reflections = f.group_reflections(mycrys,4)
print normalised_two_theta_gaps(grouped_reflections)

print mycrys.reflection_list(4)[0]