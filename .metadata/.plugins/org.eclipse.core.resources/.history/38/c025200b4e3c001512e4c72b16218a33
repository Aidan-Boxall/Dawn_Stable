 from scitbx.matrix import col as Vector
import scisoftpy as dnp
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


import finding_the_rotation_matrix as rm
import Crystal as c


def group_reflections(crys, energy=8, print_list=False, refl='orient'):
    """Groups reflections according to two theta value.

    Args:
        crys: A crystal class object.

        energy: The energy of the x-rays in keV. Default is 8.

        print_list: Defaults to False. If True prints the list index, the hkl
            values the first reflection in the group and the number of 
            reflections in the group for each group in reflection list.

    Returns:
        grouped_reflection_list: A list of reflections grouped into lists of
            reflections with the same two theta value.
    """
    reflection_list = crys.reflection_list(energy, refl=refl,
                                           print_list=False,
                                           anomalous_flag=True)
    if len(reflection_list) == 0:
        return []
    grouped_reflection_list = []
    reflections_for_current_two_theta = []
    previous_two_theta = round(reflection_list[0][4], 9)
    for i, reflection in enumerate(reflection_list):
        if i > 0:
            previous_two_theta = round(reflection_list[i-1][4], 9)
        current_two_theta = round(reflection[4], 9)
        if current_two_theta == previous_two_theta:
            reflections_for_current_two_theta.append(reflection)
        else:
            grouped_reflection_list.append(reflections_for_current_two_theta)
            reflections_for_current_two_theta = [reflection]
    if reflections_for_current_two_theta != []:  # In case last angle has only
                #                                            one reflection.
        grouped_reflection_list.append(reflections_for_current_two_theta)
    if print_list:
        for i, group in enumerate(grouped_reflection_list):
            print i, group[0][0], len(group)
    return grouped_reflection_list


def momentum_transfer_vectors(reflection_list, crys):
    """Returns a list of the momentum transfer vectors in cartesian space
    given a list of reflections.

    Args:
        reflection_list: A list of reflections

        crys: The crystal to which the reflections belong.

    Returns:
        momentum_transfer_vectors: A list of the momentum transfer vectors.
    """
    b_matrix = crys.lattice.b_matrix()
    momentum_transfer_vectors = []
    for i, reflection in enumerate(reflection_list):
        momentum_transfer_vector = dnp.dot(b_matrix, reflection[0])
        momentum_transfer_vector = Vector((momentum_transfer_vector[0],
                                           momentum_transfer_vector[1],
                                           momentum_transfer_vector[2]))
        momentum_transfer_vectors.append(momentum_transfer_vector)
    return momentum_transfer_vectors


def plot_sphere(radius=1, fig=None, ax=None, invisible=False):
    """Plots a sphere given a radius

    Args:
        radius: The radius of the sphere.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the sphere is plotted. If None is passed a new
                axis is made.

    Returns:
        None
    """
    import numpy as np
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    # Source: http://matplotlib.org/examples/mplot3d/surface3d_demo2.html
    phi = np.linspace(0, 2 * dnp.pi, 100)
    theta = np.linspace(0, dnp.pi, 100)
    x = radius * np.outer(np.cos(phi), np.sin(theta))
    y = radius * np.outer(np.sin(phi), np.sin(theta))
    z = radius * np.outer(np.ones(np.size(phi)), np.cos(theta))
    if invisible:
        ax.scatter(x, y, z, s=0)
    else:
        ax.plot_wireframe(x, y, z, rstride=5, cstride=5, color='y')


def plot_vectors(vector_list, fig=None, ax=None, color='black', size=30):
    """Given a list of vectors it plots them in 3D as points.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the points are plotted. If None is passed a new
                axis is made.

        color: The color to make the points, defaults to black.

        size: The size of the points, default is 30.
    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    xs = []
    ys = []
    zs = []
    for i, vector in enumerate(vector_list):
        xs.append(vector[0])
        ys.append(vector[1])
        zs.append(vector[2])
    ax.scatter(xs, ys, zs, depthshade=True, s=size, c=color)



def plot_vectors_wireframe(vector_list, fig=None, ax=None, color='black'):
    """Given a list of vectors it plots them in 3D as a wireframe.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the points are plotted. If None is passed a new
                axis is made.

        color: The color to make the points, defaults to black.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    xs = []
    ys = []
    zs = []
    for i, vector in enumerate(vector_list):
        xs = []
        ys = []
        zs = []
        if i%2==0 and i!=len(vector_list)-1:
            xs.append(vector[0])
            ys.append(vector[1])
            zs.append(vector[2])
            xs.append(vector_list[i+1][0])
            ys.append(vector_list[i+1][1])
            zs.append(vector_list[i+1][2])
            ax.plot3D(xs, ys, zs)


def plot_vectors_in_xy_plane(vector_list, fig=None, ax=None, color='black', size=30):
    """Given a list of vectors it plots them in as points in the xy plane.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the points are plotted. If None is passed a new
                axis is made.

        color: The color to make the points, defaults to black.

        size: The size of the points, default is 30.
    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111)
    xs = []
    ys = []
    for i, vector in enumerate(vector_list):
        xs.append(vector[0])
        ys.append(vector[1])
    ax.scatter(xs, ys, s=size, c=color)


def plot_vectors_as_lines(vector_list, fig=None, ax=None, color='black'):
    """Given a list of vectors it plots them in 3D as lines.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the lines are plotted. If None is passed a new
                axis is made.
        color: The color to make the lines, defaults to black.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    xs = []
    ys = []
    zs = []
    for i, vector in enumerate(vector_list):
        xs.append(vector[0])
        ys.append(vector[1])
        zs.append(vector[2])
    for i, vector in enumerate(vector_list):
        current_xs = [0, xs[i]]
        current_ys = [0, ys[i]]
        current_zs = [0, zs[i]]
        ax.plot(current_xs, current_ys, current_zs, c=color)


def plot_vectors_as_arrows(vector_list, fig=None, ax=None, color='black'):
    """Given a list of vectors it plots them in 3D as arrows.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the arrows are plotted. If None is passed a new
                axis is made.
        color: The color to make the arrows, defaults to black.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    plot_vectors(vector_list, fig, ax, size=0)#sets axis size
    ax.scatter(0,0,0,s=0)# ensures the origin is included
    xs = []
    ys = []
    zs = []
    for i, vector in enumerate(vector_list):
        xs.append(vector[0])
        ys.append(vector[1])
        zs.append(vector[2])
    from matplotlib.patches import FancyArrowPatch
    from mpl_toolkits.mplot3d import proj3d
    
    class Arrow3D(FancyArrowPatch):
        def __init__(self, xs, ys, zs, *args, **kwargs):
            FancyArrowPatch.__init__(self, (0,0), (0,0), *args, **kwargs)
            self._verts3d = xs, ys, zs
    
        def draw(self, renderer):
            xs3d, ys3d, zs3d = self._verts3d
            xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
            self.set_positions((xs[0],ys[0]),(xs[1],ys[1]))
            FancyArrowPatch.draw(self, renderer)

    for i, vector in enumerate(vector_list):
        a = Arrow3D([0,xs[i]],[0,ys[i]],[0,zs[i]], mutation_scale=20, lw=1, arrowstyle="-|>", color=color)
        ax.add_artist(a)

def plot_vectors_as_arrows_in_xy_plane(vector_list, fig=None, ax=None,
                                      color='black'):
    """Given a list of vectors it plots them in 2D as arrows.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the arrows are plotted. If None is passed a new
                axis is made.
        color: The color to make the arrows, defaults to black.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111)
    plot_vectors_in_xy_plane(vector_list, fig, ax, size=0)#sets axis size
    ax.scatter(0,0,s=0)# ensures the origin is included
    xs = []
    ys = []
    for i, vector in enumerate(vector_list):
        xs.append(vector[0])
        ys.append(vector[1])
    from matplotlib.patches import Arrow
    for i, vector in enumerate(vector_list):
        a = Arrow(0, 0, xs[i] ,ys[i], color=color, width=0.15*vector.length())
        ax.add_artist(a)

def stereographic_projection(vector_list, fig=None, ax=None, color='black'):
    """Given a list of vectors it plots them onto a stereographic projection.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111)
    radius = dnp.linalg.norm(vector_list[0])
    xs=[]
    ys=[]
    for i, vector in enumerate(vector_list):
        xs.append((vector[0]*radius)/(radius-vector[2]))
        ys.append((vector[1]*radius)/(radius-vector[2]))
    ax.scatter(xs,ys, color=color)
    
    import numpy as np
    # Source: http://matplotlib.org/examples/mplot3d/surface3d_demo2.html
    phi = np.linspace(0, 2 * dnp.pi, 100)
    theta = np.linspace(0, dnp.pi, 19)
    x = radius * np.outer(np.cos(phi), np.sin(theta))
    y = radius * np.outer(np.sin(phi), np.sin(theta))
    z = radius * np.outer(np.ones(np.size(phi)), np.cos(theta))
    for _, _theta in enumerate(theta):
        if _theta != 0 and _theta!=dnp.pi/2:
            x = radius * np.outer(np.cos(phi), np.sin(_theta))
            y = radius * np.outer(np.sin(phi), np.sin(_theta))
            z = radius * np.outer(np.ones(np.size(phi)), np.cos(_theta))
            X=[(_x*radius)/(radius-z[i]) for i, _x in enumerate(x)]
            Y=[(_y*radius)/(radius-z[i]) for i, _y in enumerate(y)]
            ax.plot(X,Y, color='red')
        elif _theta == dnp.pi/2:
            x = radius * np.outer(np.cos(phi), np.sin(_theta))
            y = radius * np.outer(np.sin(phi), np.sin(_theta))
            z = radius * np.outer(np.ones(np.size(phi)), np.cos(_theta))
            X=[(_x*radius)/(radius-z[i]) for i, _x in enumerate(x)]
            Y=[(_y*radius)/(radius-z[i]) for i, _y in enumerate(y)]
            ax.plot(X,Y, color='green')
    axis_params = [dnp.absolute(min(xs))*1.1, max(xs)*1.1, dnp.absolute(
                   min(ys))*1.1, max(ys)*1.1]
    fig_len = max(axis_params)*1.1
    ax.axis([-fig_len, fig_len, -fig_len, fig_len])
    return xs, ys


def many_vector_plots(crys, energy=8, number_of_plots='all'):
    """Given a crystal it produces a number of 3D plots of equivalent
           reflections.

    Args:
        crys: The crystal to be used.

        number_of_plots: The number_of_plots to produce, default is 'all'

        energy: The beam energy.

    Returns:
        None
    """
    grouped_reflections = group_reflections(crys, energy)
    if number_of_plots == 'all':
        number_of_plots = len(grouped_reflections)
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    for i, group in enumerate(grouped_reflections):
        if i < number_of_plots:
            plot_width = dnp.sqrt(number_of_plots)+1
#             ax = fig.add_subplot(plot_width, plot_width, i+1, projection='3d')
            vectors = momentum_transfer_vectors(grouped_reflections[i],
                                                    crys)
            plot_vectors(vectors, fig, ax)
#             plot_sphere(dnp.linalg.norm(vectors[0]), fig, ax)


def many_stereographic_plots(crys, energy=8, number_of_plots='all'):
    """Given a crystal it produces a number of stereographic plots of equivalent
           reflections.

    Args:
        crys: The crystal to be used.

        number_of_plots: The number_of_plots to produce, default is 'all'

        energy: The beam energy.

    Returns:
        None
    """
    grouped_reflections = group_reflections(crys, energy)
    if number_of_plots == 'all':
        number_of_plots = len(grouped_reflections)
    fig = plt.figure()
    for i, group in enumerate(grouped_reflections):
        if i < number_of_plots:
            plot_width = dnp.sqrt(number_of_plots)+1
            ax = fig.add_subplot(plot_width, plot_width, i+1)
            vectors = momentum_transfer_vectors(grouped_reflections[i],
                                                    crys)
            stereographic_projection(vectors, fig, ax)


def plot_by_hkl(cif, hkl_list, fig=None, ax=None, energy=8, refl='orient', with_sphere=True):
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    mycrys = c.Crystal()
    mycrys.load_cif(cif)
    grouped_reflections = group_reflections(mycrys, energy=energy, refl=refl)
    all_vectors = []
    for i, group in enumerate(grouped_reflections):
        group_vectors = momentum_transfer_vectors(group, mycrys)
        for j, item in enumerate(group):
            vector_hkl = (group_vectors[j], item[0])
            all_vectors.append(vector_hkl)
    for hkl in hkl_list:
        for vector in all_vectors:
            if hkl == vector[1]:
                plot_vectors([vector[0]], fig, ax)
                print vector[0].length()
                if with_sphere:
                    radius = vector[0].length()
                break
    if with_sphere:
        plot_sphere(radius, fig, ax)

def find_hkls(mycrys, vectors, energy=8, refl='orient'):
    grouped_reflections = group_reflections(mycrys, energy=energy, refl=refl)
    all_vectors = []
    for i, group in enumerate(grouped_reflections):
        group_vectors = momentum_transfer_vectors(group, mycrys)
        for j, item in enumerate(group):
            vector_hkl = (group_vectors[j], item[0], len(group), group)
            all_vectors.append(vector_hkl)
    hkls = []
    for vector in vectors:
        for vector_hkl in all_vectors:
            if vector == vector_hkl[0]:
                print vector_hkl[3]
                hkls.append([vector_hkl[1], vector_hkl[2]])
                break
    return hkls

# def rotation_to_quaternion(vector, angle):
#     """Converts a rotation in terms of an angle and unit vector into a
#     quaternion.
# 
#     Args:
#         axis: The vector in the direction of the axis of rotation.
# 
#         angle The angle through which the rotation is made. It has to
#             be passed in degrees.
# 
#     Returns:
#         A quaternion that performs the rotation.
#     """
#     axis = unit_vector(vector)
#     angle = convert_to_radians(angle)
# 
#     _ = axis * dnp.sin(angle/2)
# 
#     q = dnp.quaternion(dnp.cos(angle/2), _[0], _[1], _[2])
# 
#     return q
# 
# 
# def rotate(vector, quaternion):
#     """Rotates a vector using a quaternion.
# 
#     Args:
#         vector: The vector which is to be rotated.
# 
#         quaternion: The quaternion which describes the rotation.
# 
#     Returns:
#         The rotated vector.
#     """
#     vector = dnp.quaternion(0, vector[0], vector[1], vector[2])
#     new_vector = quaternion * vector * dnp.conjugate(quaternion)
#     new_vector = dnp.array(new_vector.imag)
#     return new_vector
# 
# 
# def change_in_momentum(momentum_in, axis_of_rotation, two_theta):
#     """Finds the change in momentum vector given momentum in, the axis of
#     functions and the two theta angle
# 
#     Args:
#         momentum_in: The momentum vector of the incident beam. Units keV/c.
# 
#         axis_of_rotion: The axis perpendicular to the difraction plane centred
#             on the sample.
# 
#         two_theta: The two_theta angle of difraction. Angle must be passed in
#             degrees.
# 
#     Returns:
#         change_in_momentum: The change in momentum vector.
#     """
#     _quaternion = rotation_to_quaternion(axis_of_rotation, two_theta)
#     momentum_out = rotate(momentum_in, _quaternion)
#     return momentum_out - momentum_in


