import scisoftpy as dnp
import copy
import scitbx.math as scm
from scitbx.matrix import col as Vector
from scitbx.matrix import sqr as Rotator

def combinations(iterable, r):
    """Equivalent to itetools.combinations which is not available in jython"""
    # combinations('ABCD', 2) --> AB AC AD BC BD CD
    # combinations(range(4), 3) --> 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = range(r)
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)


def get_rotator(vector, target):
    """Given a vector and a target vector finds the Rotator that turns one into
    the other.
    """
    axis = vector.cross(target)
    axis = axis.normalize()
    angle = dnp.arccos(vector.normalize().dot(target.normalize()))
    return Rotator(scm.r3_rotation_axis_and_angle_as_matrix(axis, angle))


def get_second_rotator(origional_target, vector, target):
    axis = origional_target.normalize()
#     axis = Vector(0,0,1)
    vector = vector.normalize()
    target = target.normalize()
    v1 = vector - axis*(vector.dot(axis))
    v2 = target - axis*(target.dot(axis))
    angle = dnp.arccos(v1.normalize().dot(v2.normalize()))
    angle = float(angle)
    if (v1.cross(v2)).length()<10**-15:
        raise Exception('vector and target are parallel so the cross product is zero')
    if ((v1.cross(v2)).normalize()).dot(axis.normalize()) > 0:
        return Rotator(scm.r3_rotation_axis_and_angle_as_matrix(axis, angle))
    else:
        return Rotator(scm.r3_rotation_axis_and_angle_as_matrix(axis, -angle))

def finding_the_targets(found_vectors, theoretical_vectors):
    if len(found_vectors) == 2:
        found_dot = (found_vectors[0].normalize()).dot(found_vectors[1].normalize())
        found_angle = float(dnp.rad2deg(dnp.arccos(found_dot)))
        for r in range(9, 1, -1):
            for combination in combinations(theoretical_vectors, 2):
                if round(combination[0].length(), r) == round(
                    found_vectors[0].length(), r) and round(combination[1].length(),
                        r) == round(found_vectors[1].length(), r):
                    target_dot = (combination[0].normalize()).dot(combination[1].normalize())
                    target_angle = float(dnp.rad2deg(dnp.arccos(target_dot)))
                    if round(found_angle) == round(target_angle):
                        return list(combination)
                if round(combination[0].length(), r) == round(
                    found_vectors[1].length(), r) and round(combination[1].length(),
                        r) == round(found_vectors[0].length(), r): 
                    target_dot = combination[0].normalize().dot(combination[1].normalize())
                    target_angle = float(dnp.rad2deg(dnp.arccos(target_dot)))
                    if round(found_angle) == round(target_angle):
                        return [combination[1], combination[0]]
        raise Exception("""Could not find two vectors with moduli that match the
                            theoretical vectors to an accuracy of 2 decimal
                                places and an angle between them which matches to 
                                    the nearest degree.""")
    else:
        found_dot = (found_vectors[0].normalize()).dot(found_vectors[1].normalize())
        found_angle = float(dnp.rad2deg(dnp.arccos(found_dot)))
        for r in range(9, 1, -1):
            for combination in combinations(theoretical_vectors, 2):
                if round(combination[0].length(), r) == round(
                    found_vectors[0].length(), r) and round(combination[1].length(),
                        r) == round(found_vectors[1].length(), r):
                    target_dot = (combination[0].normalize()).dot(combination[1].normalize())
                    target_angle = float(dnp.rad2deg(dnp.arccos(target_dot)))
                    if round(found_angle) == round(target_angle):
                        targets = list(combination)
                if round(combination[0].length(), r) == round(
                    found_vectors[1].length(), r) and round(combination[1].length(),
                        r) == round(found_vectors[0].length(), r): 
                    target_dot = combination[0].normalize().dot(combination[1].normalize())
                    target_angle = float(dnp.rad2deg(dnp.arccos(target_dot)))
                    if round(found_angle) == round(target_angle):
                        targets = [combination[1], combination[0]]
        try:
            targets
        except:
            raise Exception("""Could not find two vectors with moduli that match the
                                theoretical vectors to an accuracy of 2 decimal
                                    places and an angle between them which matches to 
                                        the nearest degree.""")
        target_plane_normal = found_vectors[0].cross(found_vectors[1])
        found_plane_normal = found_vectors[0].cross(found_vectors[1])
        found_dot = found_vectors[2].dot(found_plane_normal)
        # find third target
        dot0 = found_vectors[0].dot(found_vectors[2])
        dot1 = found_vectors[1].dot(found_vectors[2])
        angle0 = float(dnp.rad2deg(dnp.arccos(dot0)))
        angle1 = float(dnp.rad2deg(dnp.arccos(dot1)))
        for vector in theoretical_vectors:
            if vector != targets[0] and vector!= targets[1]:
                M = scm.matrix.sqr(targets[0].elems, targets[1].elems, vector.elems)
                if M.determinant()<10**-15:
                    t_dot0 = found_vectors[0].dot(vector)
                    t_angle0 = float(dnp.rad2deg(dnp.arccos(dot0)))
                    t_dot1 = found_vectors[1].dot(vector)
                    t_angle1 = float(dnp.rad2deg(dnp.arccos(dot1)))
                    if round(t_angle0) == round(angle0) and round(t_angle1) == round(angle1):
                        break
                    if round(t_angle0) == round(angle1) and round(t_angle1) == round(angle0):
                        break
        target_dot = vector.dot(target_plane_normal)
        if target_dot < 0 and found_dot < 0 or target_dot > 0 and found_dot > 0:
            return targets
        else:
            return [targets[1], targets[0]]

def rotate_list(rotation, vector_list):
    vectors_list = copy.deepcopy(vector_list)
    for i, vector in enumerate(vectors_list):
        vector = rotation * vector
        vectors_list[i] = vector
    return vectors_list

# def get_third_rotator(origional_target, vector, target):
#     axis = origional_target
#     axis = axis.normalize()
#     vector = vector.normalize()
#     target = target.normalize()
#     v1 = vector - (vector*axis)*axis
#     v2 = target - (target*axis)*axis
#     print (vector*axis)*axis, (target*axis)*axis
#     angle = dnp.arccos(v1*v2)
#     angle = float(dnp.rad2deg(angle))
#     return Rotator(axis,-angle)


# x =Vector()
# y = Vector(0,1)
# print x
# y = y.normalize()
# z = Vector(0,0,1)
# # z = Vector(0,0,5)
# # r = Rotator(z,90)
# r = get_rotator(x,y)
# # z = r*x
# print r.R
# print y,z
# m = Rotator(z,90)
# n =m*m
# print n.R
# y = m*y
# print y



