import scisoftpy as dnp
import finding_the_rotation_matrix as rm
import functions as f
import copy
import scitbx.math as scm
from scitbx.matrix import col as Vector
from scitbx.matrix import sqr as Rotator


def find_U_matrix(found_vectors, crystal, beam_energy=8, optimise_U=True):
    """Given a Crystal class object with a cif file loaded into it, this
        function returns the U matrix as a dnp array.

    Args:
        found_vectors: A list of Vector class objects representing the momentum
            transfer vectors of the measured Bragg peaks.

        crystal: A Crystal class object.

        beam_energy: The beam energy in keV.

        optimise_U: If True the function optimises the U matrix before
            returning can be set to False if in Jython because requires scipy.

    Returns:
        U: The U matrix as a dnp object.
    """
    # First gets all the allowed momentum transfer vectors of the crystal.
    grouped_reflections = f.group_reflections(crystal, beam_energy)
    all_vectors = []
    for group in grouped_reflections:
        group_vectors = f.momentum_transfer_vectors(group, crystal)
        all_vectors += group_vectors
    # Find the target vectors.
    target_vectors = rm.finding_the_targets(found_vectors, all_vectors)
    found_vectors_copy = copy.deepcopy(found_vectors)
    # Find and apply the first rotation.
    rotation1 = rm.get_rotator(found_vectors[0], target_vectors[0])
    found_vectors = rm.rotate_list(rotation1, found_vectors)

    # Find the second rotation
    rotation2 = rm.get_second_rotator(target_vectors[0], found_vectors[1],
                                      target_vectors[1])

    U = rotation2 * rotation1

    # Optimising the U matrix
    def diff(array, data, vectors):
        """
        """
        x = array[0]
        y = array[1]
        z = array[2]
        angle = array[3]
        axis = rm.Vector([x, y, z])
        U = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(axis, angle))
        data = rm.rotate_list(U, data)
        index_list=[]
        for i, dat in enumerate(data):
            diffs = []
            dat = dat
            for j, vector in enumerate(vectors):
                diffs.append((dat-vector).length())
            index = diffs.index(min(dnp.abs(diffs)))
            index_list.append(index)
        targets = [0]*len(data)
        for i, idx in enumerate(index_list):
            targets[i] = vectors[idx]
        total = 0
        for i, dat in enumerate(data):
            total += (dat - targets[i]).length()
        return total

    if not optimise_U:
        return U
    elif optimise_U:
        U_axis_angle = scm.r3_rotation_axis_and_angle_from_matrix(U)
        axis = Vector(U_axis_angle.axis)
        # The array gives a first estimate for the arguments for the diff
            # function.
        array = dnp.array([axis[0], axis[1], axis[2], U_axis_angle.angle()])
        import scipy.optimize
        optimise = scipy.optimize.minimize(diff, array, (found_vectors_copy, 
            all_vectors), bounds=[(-1,1),(-1,1),(-1,1),(-dnp.pi, dnp.pi)])
        if optimise['success']:
            new_axis = Vector((optimise.x[0], optimise.x[1], optimise.x[2]))
            new_U = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(new_axis, optimise.x[3]))
            return new_U
        else:
            print optimise
            print diff(array, found_vectors_copy, all_vectors)
            new_axis = Vector((optimise.x[0], optimise.x[1], optimise.x[2]))
            new_U = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(new_axis, optimise.x[3]))
            new_U_axis_angle = scm.r3_rotation_axis_and_angle_from_matrix(new_U)
            array = dnp.array([new_axis[0], new_axis[1], new_axis[2], new_U_axis_angle.angle()])
            print diff(array, found_vectors_copy, all_vectors)
            print new_axis
            print axis
            print 'U matrix optimisation failed.'
            return U
    else:
        raise Exception("""optimise_U must be a boolean type""")