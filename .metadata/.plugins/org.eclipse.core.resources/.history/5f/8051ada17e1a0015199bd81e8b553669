import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


import quaternion
import Crystal


def unit_vector(vector):
    """Returns a unit vector in the same direction as vector"""
    return vector / np.linalg.norm(vector)


def convert_to_radians(angle):
    """Converts an angle in degrees to radians"""
    return angle * (np.pi/180.0)


def rotation_to_quaternion(vector, angle):
    """Converts a rotation in terms of an angle and unit vector into a
    quaternion.

    Args:
        axis: The vector in the direction of the axis of rotation.

        angle The angle through which the rotation is made. It has to
            be passed in degrees.

    Returns:
        A quaternion that performs the rotation.
    """
    axis = unit_vector(vector)
    angle = convert_to_radians(angle)

    _ = axis * np.sin(angle/2)

    q = np.quaternion(np.cos(angle/2), _[0], _[1], _[2])

    return q


def rotate(vector, quaternion):
    """Rotates a vector using a quaternion.

    Args:
        vector: The vector which is to be rotated.

        quaternion: The quaternion which describes the rotation.

    Returns:
        The rotated vector.
    """
    vector = np.quaternion(0, vector[0], vector[1], vector[2])
    new_vector = quaternion * vector * np.conjugate(quaternion)
    new_vector = np.array(new_vector.imag)
    return new_vector


def change_in_momentum(momentum_in, axis_of_rotation, two_theta):
    """Finds the change in momentum vector given momentum in, the axis of
    functions and the two theta angle

    Args:
        momentum_in: The momentum vector of the incident beam. Units keV/c.

        axis_of_rotion: The axis perpendicular to the difraction plane centred
            on the sample.

        two_theta: The two_theta angle of difraction. Angle must be passed in
            degrees.

    Returns:
        change_in_momentum: The change in momentum vector.
    """
    _quaternion = rotation_to_quaternion(axis_of_rotation, two_theta)
    momentum_out = rotate(momentum_in, _quaternion)
    return momentum_out - momentum_in


def group_reflections(crys, energy=8): 
    """Groups reflections according to two theta value.

    Args:
        crys: A crystal class object.

    Returns:
        grouped_reflection_list: A list of reflections grouped into lists of 
            reflections with the same two theta value.
    """
    reflection_list = crys.reflection_list(energy, refl='allowed',
                                           print_list=True)
    grouped_reflection_list = []
    reflections_for_current_two_theta = []
    previous_two_theta = np.around(reflection_list[0][4], 9)
    for i, reflection in enumerate(reflection_list):
        if i > 0:
            previous_two_theta = np.around(reflection_list[i-1][4], 9)
        current_two_theta = np.around(reflection[4], 9)
        if current_two_theta == previous_two_theta:
            reflections_for_current_two_theta.append(reflection)
        else:
            grouped_reflection_list.append(reflections_for_current_two_theta)
            reflections_for_current_two_theta = [reflection]
    if reflections_for_current_two_theta != []:  # In case last angle has only
                #                                            one reflection.
        grouped_reflection_list.append(reflections_for_current_two_theta)
    return grouped_reflection_list


def momentum_transfer_vectors(reflection_list, crys):
    """Returns a list of the momentum transfer vectors in cartesian space
    given a list of reflections.

    Args:
        reflection_list: A list of reflections

        crys: The crystal to which the reflections belong.

    Returns:
        momentum_transfer_vectors: A list of the momentum transfer vectors.
    """
    b_matrix = crys.lattice.b_matrix()
    momentum_transfer_vectors = []
    for i, reflection in enumerate(reflection_list):
        momentum_transfer_vector = np.dot(b_matrix, reflection[0])
        momentum_transfer_vectors.append(momentum_transfer_vector)
    return momentum_transfer_vectors


def plot_sphere(radius=1, fig=None, ax=None):
    """Plots a sphere given a radius

    Args:
        radius: The radius of the sphere.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the sphere is plotted. If None is passed a new
                axis is made.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    # Source: http://matplotlib.org/examples/mplot3d/surface3d_demo2.html
    phi = np.linspace(0, 2 * np.pi, 100)
    theta = np.linspace(0, np.pi, 100)
    x = radius * np.outer(np.cos(phi), np.sin(theta))
    y = radius * np.outer(np.sin(phi), np.sin(theta))
    z = radius * np.outer(np.ones(np.size(phi)), np.cos(theta))
    ax.plot_wireframe(x, y, z, rstride=5, cstride=5, color='y')


def plot_vectors(vector_list, fig=None, ax=None):
    """Given a list of vectors it plots them onto a 3D sphere.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the sphere is plotted. If None is passed a new
                axis is made.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111, projection='3d')
    xs = []
    ys = []
    zs = []
    for i, vector in enumerate(vector_list):
        xs.append(vector[0])
        ys.append(vector[1])
        zs.append(vector[2])
    ax.scatter(xs, ys, zs, depthshade=False, s=30, c='black')


def stereographic_projection(vector_list, fig=None, ax=None):
    """Given a list of vectors it plots them onto a stereographic projection.

    Args:
        vector_list: The list of vectors to be plotted.

        fig: The figure onto which the axis is plotted. If None is passed a new
                figure is made.

        ax: The axis onto which the sphere is plotted. If None is passed a new
                axis is made.

    Returns:
        None
    """
    if fig is None:
        fig = plt.figure()
    if ax is None:
        ax = fig.add_subplot(111)
    radius = np.linalg.norm(vector_list[0])
    xs=[]
    ys=[]
    for i, vector in enumerate(vector_list):
        xs.append((vector[0]*radius)/(radius-vector[2]))
        ys.append((vector[1]*radius)/(radius-vector[2]))
    plt.scatter(xs,ys)
    # Source: http://matplotlib.org/examples/mplot3d/surface3d_demo2.html
    phi = np.linspace(0, 2 * np.pi, 100)
    theta = np.linspace(0, np.pi, 100)
    x = radius * np.outer(np.cos(phi), np.sin(theta))
    y = radius * np.outer(np.sin(phi), np.sin(theta))
    z = radius * np.outer(np.ones(np.size(phi)), np.cos(theta))
    X=[(_x*radius)/(radius-z[i]) for i, _x in enumerate(x)]
    Y=[(_y*radius)/(radius-z[i]) for i, _y in enumerate(y)]
    plt.scatter(X,Y, color='red')
    plt.axis([np.min(xs)*1.1,np.max(xs)*1.1,np.min(ys)*1.1,np.max(ys)*1.1])