import peak_finder as fp
import scisoftpy as dnp
import numpy as np
import scitbx.math as scm
from scitbx.matrix import col as Vector
from scitbx.matrix import sqr as Rotator
import functions as f
import Crystal as c
import matplotlib.pyplot as plt

data_dir='/dls/i16/data/2015/cm12169-3/'
path_index = 527341
LENGTH = 0.502 # The length between the sample and the detector.
cif = 'HoFe2_icsd_103499.cif'
dat = dnp.io.load(data_dir+'{0:.0f}.dat'.format(path_index),
                              warn=False)
h = 6.62606957*10**-34
light_speed = 299792458
beam_energy = 8
beam_energy_J = (beam_energy*1000)*1.6*10**-19
wave_length = ((h*light_speed)/beam_energy_J)*10**10  #Angstrums
wave_vector = 1/wave_length
x_axis = Vector((1,0,0))
z_axis = Vector((0,0,1))
delta = dat.metadata['delta']+9.2
theta_angle = delta/2.0
detector_angle = 35
peak = fp.find_peaks('/dls/i16/data/2015/cm12169-3/', 527341, 527358, 1, False, False, 'roi7_sum')[0]
coords = (peak[1],peak[2])
image_centre = (108, 242)
pix_vector = Vector((peak[2] - image_centre[0], peak[1] - image_centre[1]))*172*10**-6 # in meters
pix_vector = Vector([-pix_vector[1]*np.sin(np.radians(delta + detector_angle)), pix_vector[0], pix_vector[1]*np.cos(np.radians(delta + detector_angle))])
beam_out = Vector((np.cos(np.radians(delta)), 0.0, np.sin(delta)))*LENGTH # Wave out in meters
beam_out += pix_vector # In meters
beam_out = beam_out.normalize()
beam_out = beam_out*wave_vector
beam_in = x_axis*wave_vector
print beam_in.length()
print beam_out.length()
mom_trans = beam_out - beam_in

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim(-0.3,0.3)
ax.set_ylim(-0.3,0.3)
ax.set_zlim(-0.3,0.3)
f.plot_vectors_as_arrows([beam_in],fig,ax, color = 'red')
f.plot_vectors_as_arrows([beam_out],fig,ax, color = 'blue')
f.plot_vectors_as_arrows([mom_trans],fig,ax, color = 'green')

plt.show()


beam_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(x_axis, -theta_angle, deg = True))
# beam_vector = beam_rot*beam_vector



detector_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(x_axis, -detector_angle, deg = True))
k0_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(x_axis, theta_angle, deg = True))
pixpic_vector = detector_rot*pix_vector


k0 = k0_rot*k0
k0*=radius
beam_vector+=pix_vector
beam_vector = beam_vector.normalize()*radius

mom_vector = beam_vector - k0





print detector_rot

mycrys = c.Crystal()
mycrys.load_cif(cif)
l = f.group_reflections(mycrys, print_list=False)

vectors = f.momentum_transfer_vectors(l[0], mycrys)
print vectors[1].length()


