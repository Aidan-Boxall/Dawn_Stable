import scisoftpy as dnp
import copy


def combinations(iterable, r):
    """Equivalent to itetools.combinations which is not available in jython"""
    # combinations('ABCD', 2) --> AB AC AD BC BD CD
    # combinations(range(4), 3) --> 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = range(r)
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)



class Vector(object):

    def __init__(self, x=0.0, y=0.0, z=0.0, hkl=None):
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)
        self.hkl = hkl

    def __str__(self):
        return 'Vector({0}, {1}, {2})'.format(self.x, self.y, self.z)

    def __getitem__(self, index):
        if index == 0:
            return self.x
        elif index == 1:
            return self.y
        elif index == 2:
            return self.z

    def __setitem__(self, index, set_to):
        set_to = float(set_to)
        if index == 0:
            self.x = set_to
        elif index == 1:
            self.y = set_to
        elif index == 2:
            self.z = set_to

    def __mul__(self, other):
        if isinstance(other, Vector):
            return self.x * other.x + self.y * other.y + self.z * other.z
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x*other,self.y*other, self.z*other)

    def __rmul__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x*other,self.y*other, self.z*other)

    def modulus(self):
        self.mod = (self.x**2 + self.y**2 + self.z**2)**0.5
        return self.mod

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)

    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)

    def __div__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x/other,self.y/other, self.z/other)

    def unit(self):
        return self/self.modulus()

    def xy_angle(self):
        xy_plane = Vector(self.x, self.y, 0.0)
        xy_plane = xy_plane.unit()
        x_axis = Vector(1)
        return dnp.arccos(xy_plane*x_axis)

    def __pow__(self, other):
        """Calculates the cross product if other is also a Vector"""
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x**other, self.y**other, self.z**other)
        if isinstance(other, Vector):
            return Vector(self.y*other.z - self.z*other.y, self.z*other.x - 
                          self.x*other.z, self.x*other.y - self.y*other.x)

    def __neg__(self):
        return Vector(-self.x, -self.y, -self.z)

    def __pos__(self):
        return self

    def tensor_product(self, other):
        if isinstance(other, Vector):
            other = dnp.array([[other.x], [other.y], [other.z]])
            other = dnp.transpose(other)
            vector = dnp.array([[self.x], [self.y], [self.z]])
            M = dnp.dot(vector, other)
            return M

    def dnp_array(self):
        return dnp.array([self.x, self.y, self.z])

    def __eq__(self,other):
        if not isinstance(other, Vector):
            return False
        if round(self.x, 5) == round(other.x, 5):
            if round(self.y, 5) == round(other.y, 5):
                if round(self.z, 5) == round(other.z, 5):
                    return True
        return False


class Rotator(object):
    def __init__(self, axis=None, angle=None, R=None):
        if isinstance(R, dnp.ndarray):
            if R.shape != (3, 3):
                raise Exception('R must be a 3 by 3 matrix')
            self.R = R
            angle = dnp.arccos(0.5*(sum(dnp.diag(R))-1))
            self.angle = float(dnp.rad2deg(angle))
            x = (R[2][1]-R[1][2])/(2*dnp.sin(angle))
            y = (R[0][2]-R[2][0])/(2*dnp.sin(angle))
            z = (R[1][0]-R[0][1])/(2*dnp.sin(angle))
            axis = Vector(x,y,z)
            axis = axis.unit()
            self.axis = axis
            return
        if isinstance(angle, dnp.ndarray):
            angle = angle[0]
        elif isinstance(angle, int):
            angle = float(angle)
        if not isinstance(angle, float):
            raise Exception('angle must be a float not {}'.format(type(angle)))
        axis = axis.unit()
        self.axis = axis
        self.angle =angle
        angle = float(dnp.radians(angle))
        M = dnp.array([[0.0, -axis.z, axis.y],
                       [axis.z, 0.0, -axis.x],
                       [-axis.y, axis.x, 0.0]])
        N = axis.tensor_product(axis)
        I = dnp.identity(3)
        self.R = I*dnp.cos(angle) + M*dnp.sin(angle) + (1-dnp.cos(angle))*N
        angle = 56
 
    def __mul__(self, other):
        if isinstance(other, Vector):
            vector = dnp.array([[other.x], [other.y], [other.z]])
            new_vector = dnp.dot(self.R, vector)
            new_vector = Vector(new_vector[0][0], new_vector[1][0], new_vector[2][0], other.hkl)
            return new_vector
        if isinstance(other, Rotator):
            new_R = dnp.dot(self.R, other.R)
            return Rotator(R=new_R)

    def __str__(self):
        return 'Rotator: axis: {0}, angle: {1}'.format(str(self.axis), self.angle)

def get_rotator(vector, target):
    """Given a vector and a target vector finds the Rotator that turns one into
    the other.
    """
    axis = vector**target
    axis = axis.unit()
    angle = dnp.arccos(vector.unit()*target.unit())
    angle = float(dnp.rad2deg(angle))
    return Rotator(axis, angle)

def get_second_rotator(origional_target, vector, target):
    axis = origional_target.unit()
#     axis = Vector(0,0,1)
    vector = vector.unit()
    target = target.unit()
    v1 = vector - (vector*axis)*axis
    v2 = target - (target*axis)*axis
    angle = dnp.arccos(v1.unit()*v2.unit())
    angle = float(dnp.rad2deg(angle))
    print v1, v2
    print float(dnp.rad2deg(dnp.arccos(v1*axis))), float(dnp.rad2deg(dnp.arccos(v2*axis)))
    print angle
    print (v1**v2).modulus(), axis
    if (v1**v2).modulus()<10**-15:
        print 'vector and target are parallel so the cross product is zero'
        return Rotator(axis, angle)
    if (v1**v2).unit() == axis.unit():
        print 'anticlockwise'
        return Rotator(axis, angle)
    elif (v2**v1).unit() == axis.unit():
        print 'clockwise'
        return Rotator(axis, -angle)
    else:
        raise Exception('Not rounding enough in get second rotator /n axis: {0} /n v1**v2: {1} /n v2**v1: {2}'.format(str(axis), str((v1**v2).unit()), str((v2**v1).unit())))

def finding_the_targets(found_vectors, theoretical_vectors):
    found_dot = found_vectors[0].unit()*found_vectors[1].unit()
    found_angle = float(dnp.rad2deg(dnp.arccos(found_dot)))
    print 'found_angle',found_angle
    print len(theoretical_vectors)
    for combination in combinations(theoretical_vectors, 2):
        if combination[0].modulus() == found_vectors[0].modulus(
                ) and combination[1].modulus() == found_vectors[1].modulus(): 
            target_dot = combination[0].unit()*combination[1].unit()
            target_angle = float(dnp.rad2deg(dnp.arccos(target_dot)))
            print found_angle, target_angle
            if round(found_angle) == round(target_angle):
                print found_angle, target_angle
                print round(found_angle,1), round(target_angle,1)
                return list(combination)
        if combination[0].modulus() == found_vectors[1].modulus(
                ) and combination[1].modulus() == found_vectors[0].modulus(): 
            target_dot = combination[0].unit()*combination[1].unit()
            target_angle = float(dnp.rad2deg(dnp.arccos(target_dot)))
            print found_angle, target_angle
            if round(found_angle) == round(target_angle):
                print found_angle, target_angle
                print round(found_angle,1), round(target_angle,1)
                return [combination[1], combination[0]]


def rotate_list(rotation, vector_list):
    vectors_list = copy.deepcopy(vector_list)
    for i, vector in enumerate(vectors_list):
        vector = rotation * vector
        vectors_list[i] = vector
    return vectors_list

# def get_third_rotator(origional_target, vector, target):
#     axis = origional_target
#     axis = axis.unit()
#     vector = vector.unit()
#     target = target.unit()
#     v1 = vector - (vector*axis)*axis
#     v2 = target - (target*axis)*axis
#     print (vector*axis)*axis, (target*axis)*axis
#     angle = dnp.arccos(v1*v2)
#     angle = float(dnp.rad2deg(angle))
#     return Rotator(axis,-angle)


# x =Vector()
# y = Vector(0,1)
# print x
# y = y.unit()
# z = Vector(0,0,1)
# # z = Vector(0,0,5)
# # r = Rotator(z,90)
# r = get_rotator(x,y)
# # z = r*x
# print r.R
# print y,z
# m = Rotator(z,90)
# n =m*m
# print n.R
# y = m*y
# print y



