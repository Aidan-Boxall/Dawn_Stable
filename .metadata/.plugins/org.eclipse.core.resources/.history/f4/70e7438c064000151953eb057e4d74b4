import peak_finder as fp
import scisoftpy as dnp
import numpy as np
import scitbx.math as scm
from scitbx.matrix import col as Vector
from scitbx.matrix import sqr as Rotator
import functions as f
import Crystal as c
import matplotlib.pyplot as plt
import copy
from itertools import combinations
import finding_the_rotation_matrix as rm
# x axis in beam in
# z axis the vertical
data_dir='/dls/i16/data/2015/cm12169-3/'

LENGTH = 0.502 # The length between the sample and the detector.
cif = 'HoFe2_icsd_103499.cif'

# Calculating the wave vector modlulus
h = 6.62606957*10**-34
light_speed = 299792458
beam_energy = 8
beam_energy_J = (beam_energy*1000)*1.6*10**-19
wave_length = ((h*light_speed)/beam_energy_J)*10**10  #Angstrums
wave_vector = 1/wave_length

#define the axes
x_axis = Vector((1,0,0))
y_axis = Vector((0,1,0))
z_axis = Vector((0,0,1))

# detector_angle = 35

# find the peaks
peaks = fp.find_peaks('/dls/i16/data/2015/cm12169-3/', 527359, 527369, 8, False, False, 'roi7_sum')
data = []
for peak in peaks:
    path_index = peak[0][29:35]
    image_number = int(peak[0][-9:-4])
    dat = dnp.io.load(data_dir+'{}.dat'.format(path_index),
                              warn=False)
    delta = dat.metadata['delta']+9.2
    eta = dat.metadata['eta']
    chi = dat.metadata['chi']
    phi = dat.kphi[image_number-1]+(dat.metadata.kphi-dat.metadata.phi)
#     coords = (peak[1],peak[2])
#     image_centre = (108, 242)
#     pix_vector = Vector((peak[2] - image_centre[0], peak[1] - image_centre[1]))
#     pix_vector*=172*10**-6 # in meters
#     pix_vector = Vector([-pix_vector[1]*np.sin(np.radians(delta + detector_angle)), pix_vector[0], pix_vector[1]*np.cos(np.radians(delta + detector_angle))])
    beam_out = Vector((np.cos(np.radians(delta)), 0.0, -np.sin(np.radians(delta))))*LENGTH # Wave out in meters
#     beam_out += pix_vector # In meters
    beam_out = beam_out.normalize()
    beam_out = beam_out*wave_vector
    beam_in = x_axis*wave_vector
    mom_trans = beam_out - beam_in
    eta_rot =  Rotator(scm.r3_rotation_axis_and_angle_as_matrix(y_axis, eta, deg = True))#+ve eta as left handed rotations
    mom_trans = eta_rot*mom_trans
    beam_out = eta_rot*eta_rot*beam_out
    f.plot_vectors_as_arrows([beam_in, beam_out])
    plt.show()
    chi_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(x_axis, -chi, deg = True))
    mom_trans = chi_rot*mom_trans
    phi_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(y_axis, phi, deg = True))#+ve phi as left handed rotations
    mom_trans = phi_rot*mom_trans
    data.append(mom_trans)

for combo in combinations(data, 2):
    dot = combo[0].normalize().dot(combo[1].normalize())
    print np.rad2deg(np.arccos(dot))







