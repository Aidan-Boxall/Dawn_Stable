import scisoftpy as dnp
import finding_the_rotation_matrix as rm
import Crystal as c
import functions as f
import matplotlib.pyplot as plt
import copy

def add_rot_error(vector):
    stddev = 0.1
    rand_rotation_x = rm.Rotator(rm.Vector(1),dnp.random.normal(0,stddev))
    rand_rotation_y = rm.Rotator(rm.Vector(0,1), dnp.random.normal(0,stddev))
    rand_rotation_z = rm.Rotator(rm.Vector(0,0,1),dnp.random.normal(0,stddev))
    vector = rand_rotation_z * rand_rotation_y * rand_rotation_x * vector
    return vector

def random_rotation():
    rand_rotation_x = rm.Rotator(rm.Vector(1) ,dnp.random.randint(0,361))
    rand_rotation_y = rm.Rotator(rm.Vector(0,1),dnp.random.randint(0,361))
    rand_rotation_z = rm.Rotator(rm.Vector(0,0,1),dnp.random.randint(0,361))
    return rand_rotation_z*rand_rotation_y*rand_rotation_x

def find_vector_given_hkl(hkl,vector_list):
    hkl_list=[]
    for vector in vector_list:
        hkl_list.append(vector.hkl)
    return hkl_list.index(hkl)


mycrys = c.Crystal()
mycrys.load_cif('NiCO3_icsd_61067.cif')
l = f.group_reflections(mycrys)
vectors = f.momentum_transfer_vectors(l[2], mycrys)
non_equiv = f.momentum_transfer_vectors(l[1], mycrys)
all_vectors=[]
for i, group in enumerate(l):
    all_g = f.momentum_transfer_vectors(l[i], mycrys)
    print group, i
    all_vectors+=all_g
f.plot_vectors(all_vectors)
all_vectors_copy = copy.deepcopy(all_vectors)

# choose random equivalent vectors

# dot = 0
# while dot<10**(-5) or 179.9<dot<180.1:
#     i = dnp.random.randint(len(vectors))
#     j=i
#     k=i
#     while i == j:
#             j = dnp.random.randint(len(vectors))
#     while i==k or j==k:
#         k = dnp.random.randint(len(vectors))
#     dot = dnp.rad2deg(dnp.arccos(vectors[i].unit()* vectors[j].unit()))
# print i, j, k
i = 0 
j = 2

# add a non-equivalent vector
hkl1 = (0,0,6)
hkl2 = (1,0,4)
mock_data = [vectors[i], non_equiv[j]] + vectors + non_equiv
print 'Measured', mock_data[0].hkl, mock_data[1].hkl
# add rotational error
#mock_data = [add_rot_error(dat) for dat in mock_data]

# Plot vectors with error added
unit_mock_data = [dat.unit() for dat in mock_data]
fig = plt.figure()
ax = fig.add_subplot(233)
fig2 = plt.figure()
ax2 = fig2.add_subplot(233, projection='3d')
f.plot_vectors(mock_data[:2], fig2, ax2)
f.plot_sphere(mock_data[0].modulus(), fig2, ax2)
xs= []
ys=[]
t = f.stereographic_projection([unit_mock_data[0]], fig,ax, color = 'black')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[1]], fig,ax, color = 'green')
xs.append(t[0][0])
ys.append(t[1][0])
# t = f.stereographic_projection([unit_mock_data[2]], fig,ax, color = 'orange')
# xs.append(t[0][0])
# ys.append(t[1][0])
# #t = f.stereographic_projection([unit_mock_data[3]], fig,ax, color = 'blue')
# xs.append(t[0][0])
# ys.append(t[1][0])
axis_params = [dnp.absolute(min(xs))*1.1, max(xs)*1.1,dnp.absolute(min(ys))*1.1,max(ys)*1.1]
fig_len=max(axis_params)*1.1
ax.axis([-fig_len,fig_len,-fig_len,fig_len])


# Add a random rotation and make some copys
target_data = [vectors[1], non_equiv[j]]

rand_rot = random_rotation()
mock_data = rm.rotate_list(rand_rot, mock_data)
all_vectors_copy = rm.rotate_list(rand_rot, all_vectors_copy)
data = copy.deepcopy(mock_data)

data2 = copy.deepcopy(mock_data)

# Plot the vectors after the random rotation

ax = fig.add_subplot(234)
unit_mock_data = [dat.unit() for dat in mock_data]
ax2 = fig2.add_subplot(234, projection='3d')
f.plot_vectors(mock_data, fig2, ax2)
f.plot_sphere(mock_data[0].modulus(), fig2, ax2)
xs= []
ys=[]
t = f.stereographic_projection([unit_mock_data[0]], fig,ax, color = 'black')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[1]], fig,ax, color = 'green')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[2]], fig,ax, color = 'orange')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[3]], fig,ax, color = 'blue')
xs.append(t[0][0])
ys.append(t[1][0])
axis_params = [dnp.absolute(min(xs))*1.1, max(xs)*1.1,dnp.absolute(min(ys))*1.1,max(ys)*1.1]
fig_len=max(axis_params)*1.1
ax.axis([-fig_len,fig_len,-fig_len,fig_len])


# Find the vectors to aim for

# target_data = rm.finding_the_targets(mock_data, all_vectors)

print 'Target:', target_data[0].hkl, target_data[1].hkl
print len(target_data)
# Plot all equiv reflections and the target

vectors_unit = [vector.unit() for vector in vectors]
non_equiv_unit = [vector.unit() for vector in non_equiv]
vectors += non_equiv
ax = fig.add_subplot(231)
f.stereographic_projection(vectors_unit, fig,ax, color = 'blue')
f.stereographic_projection(non_equiv_unit, fig,ax, color = 'green')
ax2 = fig2.add_subplot(231, projection='3d')
f.plot_vectors(vectors[:6], fig2, ax2)
f.plot_sphere(mock_data[0].modulus(), fig2, ax2)


ax = fig.add_subplot(232)
unit_target_data = [dat.unit() for dat in target_data]
xs= []
ys=[]
t = f.stereographic_projection([unit_target_data[0]], fig,ax, color = 'black')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_target_data[1]], fig,ax, color = 'green')
xs.append(t[0][0])
ys.append(t[1][0])
axis_params = [dnp.absolute(min(xs))*1.1, max(xs)*1.1,dnp.absolute(min(ys))*1.1,max(ys)*1.1]
fig_len=max(axis_params)*1.1
ax.axis([-fig_len,fig_len,-fig_len,fig_len])
ax2 = fig2.add_subplot(232, projection='3d')
f.plot_vectors(target_data, fig2, ax2)
f.plot_sphere(mock_data[0].modulus(), fig2, ax2)

# f.stereographic_projection(target_data, fig,ax)

# Apply first rotation
r = rm.get_rotator(mock_data[0], target_data[0])
mock_data = rm.rotate_list(r, mock_data)

# Plot after first rotation

ax = fig.add_subplot(235)
unit_mock_data = [dat.unit() for dat in mock_data]
ax2 = fig2.add_subplot(235, projection='3d')
f.plot_vectors(mock_data, fig2, ax2)
f.plot_sphere(mock_data[0].modulus(), fig2, ax2)
xs= []
ys=[]
t = f.stereographic_projection([unit_mock_data[0]], fig,ax, color = 'black')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[1]], fig,ax, color = 'green')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[2]], fig,ax, color = 'orange')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[3]], fig,ax, color = 'blue')
xs.append(t[0][0])
ys.append(t[1][0])
axis_params = [dnp.absolute(min(xs))*1.1, max(xs)*1.1,dnp.absolute(min(ys))*1.1,max(ys)*1.1]
fig_len=max(axis_params)*1.1
ax.axis([-fig_len,fig_len,-fig_len,fig_len])


# Apply second rotation

r2 = rm.get_second_rotator(target_data[0], mock_data[1], target_data[1])
mock_data = rm.rotate_list(r2, mock_data)

# Plot after second rotation

ax = fig.add_subplot(236)
unit_mock_data = [dat.unit() for dat in mock_data]
ax2 = fig2.add_subplot(236, projection='3d')
f.plot_vectors(mock_data, fig2, ax2)
f.plot_sphere(mock_data[0].modulus(), fig2, ax2)
xs= []
ys=[]
t = f.stereographic_projection(unit_mock_data, fig,ax, color = 'blue')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[0]], fig,ax, color = 'black')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[1]], fig,ax, color = 'green')
xs.append(t[0][0])
ys.append(t[1][0])
t = f.stereographic_projection([unit_mock_data[2]], fig,ax, color = 'orange')
xs.append(t[0][0])
ys.append(t[1][0])
axis_params = [dnp.absolute(min(xs))*1.1, max(xs)*1.1,dnp.absolute(min(ys))*1.1,max(ys)*1.1]
fig_len=max(axis_params)*1.1
ax.axis([-fig_len,fig_len,-fig_len,fig_len])


# Define U matrix rotator

U = r2 * r

all_vectors_copy = rm.rotate_list(U, all_vectors_copy)
f.plot_vectors(all_vectors_copy)

# Optimising the U matrix
def diff(array, data, vectors):
    x = array[0]
    y = array[1]
    z = array[2]
    angle = array[3]
    axis = rm.Vector(x,y,z)
    U = rm.Rotator(axis, angle)
    data = rm.rotate_list(U, data)
    index_list=[]
    for i, dat in enumerate(data):
        diffs = []
        for j, vector in enumerate(vectors):
            diffs.append((dat-vector).modulus())
        index = diffs.index(min(dnp.abs(diffs)))
        index_list.append(index)
    targets = [0]*len(data)
    for i, idx in enumerate(index_list):
        targets[i] = vectors[idx]
    total = 0
    for i, dat in enumerate(data):
        total += (dat - targets[i]).modulus()
    return total

axis = U.axis
array = dnp.array([axis.x, axis.y, axis.z, U.angle])

print diff(array, data, vectors)




data_unit = [dat.unit() for dat in data]

import scipy.optimize
opt = scipy.optimize.minimize(diff, array, (data_unit, vectors_unit))
print opt
print array
print opt.x
print diff(opt.x,data,vectors)
axis = rm.Vector(opt.x[0], opt.x[1], opt.x[2])
new_U = rm.Rotator(axis, opt.x[3])
data_unit2 = [dat.unit() for dat in data2]
new = rm.rotate_list(new_U, data_unit2)
fig = plt.figure()
ax = fig.add_subplot(121)
f.stereographic_projection(new[:3], fig,ax, color = 'blue')
ax2 = fig.add_subplot(122, projection='3d')
f.plot_vectors(new[:9], fig, ax2)
f.plot_sphere(new[0].modulus(), fig, ax2)


print U
print new_U

plt.show()