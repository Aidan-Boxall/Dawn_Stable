import numpy as np
import functions as f
import quaternion
from scipy.optimize import minimize

class Vector(object):
    def update_q(self):
        self.q = np.quaternion(0.0, self.x, self.y, self.z)

    def __init__(self, x=0.0, y=0.0, z=0.0):
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)
        self.update_q()

    def __str__(self):
        return '({0}, {1}, {2})'.format(self.x, self.y, self.z)

    def __getitem__(self, index):
        if index == 0:
            return self.q.x
        elif index == 1:
            return self.q.y
        elif index == 2:
            return self.q.z

    def __setitem__(self, index, set_to):
        set_to = float(set_to)
        if index == 0:
            self.x = set_to
            self.update_q()
        elif index == 1:
            self.y = set_to
            self.update_q()
        elif index == 2:
            self.z = set_to
            self.update_q()

    def __mul__(self, other):
        if isinstance(other, Vector):
            return self.x * other.x + self.y * other.y + self.z * other.z
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x*other,self.y*other, self.z*other)

    def __rmul__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x*other,self.y*other, self.z*other)

    def modulus(self):
        self.modulus = (self.x**2 + self.y**2 + self.z**2)**0.5
        return self.modulus

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)

    def __div__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            return Vector(self.x/other,self.y/other, self.z/other)

    def unit(self):
        return self/self.modulus()

    def xy_angle(self):
        xy_plane = Vector(self.x, self.y, 0.0)
        xy_plane = xy_plane.unit()
        x_axis = Vector(1)
        return np.arccos(xy_plane*x_axis)

class Rotator(object):
    def __init__(self, axis, angle):
        self.axis = axis.unit()
        self.angle = f.convert_to_radians(angle)
        _ = self.axis * np.sin(self.angle/2.0)
        print _, self.angle, self.axis, np.sin(self.angle/2.0)
        self.quaternion = np.quaternion(np.cos(self.angle/2.0), _[0], _[1],
                                                                        _[2])
    def __mul__(self, other):
        if isinstance(other, Vector):
            new_vector = np.quaternion(0.0, other[0], other[1], other[2])
            new_vector = self.quaternion * new_vector * np.conjugate(
                                                            self.quaternion)
            new_vector = Vector(new_vector.x, new_vector.y, new_vector.z)
            return new_vector

def seek_xy_angle(angle, vector=Vector(0,1), target=Vector(1)):
    z_axis = Vector(0,0,1)
    new_vector = Rotator(z_axis, angle)*vector
    return np.abs(new_vector.xy_angle()-target.xy_angle())

x = Vector(1)
z = Vector(0,0,5)
r = Rotator(z,90)
x = x * 0.001
print x

# minimize(seek_xy_angle, 2.0)


