import peak_finder as fp
import scisoftpy as dnp
import numpy as np
import scitbx.math as scm
from scitbx.matrix import col as Vector
from scitbx.matrix import sqr as Rotator
import functions as f
import Crystal as c
import matplotlib.pyplot as plt
import copy
from itertools import combinations
import finding_the_rotation_matrix as rm
# x axis in beam in
# z axis the vertical
data_dir='/dls/i16/data/2015/cm12169-3/'

LENGTH = 0.502 # The length between the sample and the detector.
cif = 'HoFe2_icsd_103499.cif'
mycrys = c.Crystal()
mycrys.load_cif(cif)

# Calculating the wave vector modlulus
h = 6.62606957*10**-34
light_speed = 299792458
beam_energy = 8
beam_energy_J = (beam_energy*1000)*1.6*10**-19
wave_length = ((h*light_speed)/beam_energy_J)*10**10  #Angstrums
wave_vector = 1/wave_length

#define the axes
x_axis = Vector((1,0,0))
y_axis = Vector((0,1,0))
z_axis = Vector((0,0,1))

detector_angle = 35

# find the peaks
peaks = fp.find_peaks('/dls/i16/data/2015/cm12169-3/', 527341, 527358, 16, True, False, 'roi7_sum')
data_tup = []
data = []
for i, peak in enumerate(peaks):
    path_index = peak[0][29:35]
    image_number = int(peak[0][-9:-4])
    dat = dnp.io.load(data_dir+'{}.dat'.format(path_index),
                              warn=False)
    delta = dat.metadata['delta']+9.2
    eta = dat.metadata['eta']
    chi = dat.metadata['chi']
    phi = dat.kphi[image_number-1]+(dat.metadata.kphi-dat.metadata.phi)
    coords = (peak[1],peak[2])
    image_centre = (108, 242)
    pix_vector = Vector((peak[2] - image_centre[0], peak[1] - image_centre[1]))
    pix_vector*=172*10**-6 # in meters
    pix_vector = Vector([-pix_vector[1]*np.sin(np.radians(delta + detector_angle)), pix_vector[0], pix_vector[1]*np.cos(np.radians(delta + detector_angle))])
    beam_out = Vector((np.cos(np.radians(delta)), 0.0, np.sin(np.radians(delta))))*LENGTH # Wave out in meters
#     beam_out += pix_vector # In meters
    beam_out = beam_out.normalize()
    beam_out = beam_out*wave_vector
    beam_in = x_axis*wave_vector
    mom_trans = beam_out - beam_in
    eta_rot =  Rotator(scm.r3_rotation_axis_and_angle_as_matrix(y_axis, eta, deg = True))#+ve eta as left handed rotations
    mom_trans = eta_rot*mom_trans
    chi_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(x_axis, -chi, deg = True))
    mom_trans = chi_rot*mom_trans
    phi_rot = Rotator(scm.r3_rotation_axis_and_angle_as_matrix(y_axis, phi, deg = True))#+ve phi as left handed rotations
    mom_trans = phi_rot*mom_trans
    data.append(mom_trans)
    data_tup.append((mom_trans, chi))
#     if i==1:
#         break

data_angs= []
print 'Data combos'
for combo in combinations(data_tup, 2):
    dot = combo[0][0].normalize().dot(combo[1][0].normalize())
    data_angs.append((np.rad2deg(np.arccos(dot)), combo[0][1], combo[1][1], combo[0][0], combo[1][0]))
print 

print 'Theory combos'
group_angs = []
group = f.plot_by_hkl_group(cif, (1,1,3))
for combo in combinations(group, 2):
    dot = combo[0].normalize().dot(combo[1].normalize())
    group_angs.append(np.rad2deg(np.arccos(dot)))

oh_yeah=0
equal_chi = 0
equal_chi_cor=[]
for ang in data_angs:
    if ang[1]==ang[2]:
        equal_chi+=1
    for gang in group_angs:
        if ang[0]-2<gang<ang[0]+2:
            if ang[1]==ang[2]:
                equal_chi_cor.append(ang[3])
#             print 'oh yeah'
#             print ang, gang
#             print
            oh_yeah+=1
            break
group_angs = list(set(group_angs))
print "Theory angles", len(group_angs)
print "Angles:",len(data_angs)
print "Angles matched: ",oh_yeah
print "Angles at equal chi: ",equal_chi
print "Angles at equal chi matched",len(equal_chi_cor)
print f.find_2theta_nearest_by_hkl(cif, (1,1,3))
print len(group)
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
f.plot_vectors_as_arrows(data, fig, ax)
ax.set_xlim(-0.6,0.6)
ax.set_ylim(-0.6,0.6)
ax.set_zlim(-0.6,0.6)
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')

f.plot_vectors_as_arrows(equal_chi_cor, fig, ax)
ax.set_xlim(-0.6,0.6)
ax.set_ylim(-0.6,0.6)
ax.set_zlim(-0.6,0.6)

# U = rm.find_U_matrix(equal_chi_cor, mycrys, 8, refl='allowed', angle_accuracy = 50)
# rm.rotate_list(U, data)
# fig = plt.figure()
# ax = fig.add_subplot(111, projection = '3d')
# f.plot_vectors_as_arrows(data, fig,ax)
# ax.set_xlim(-0.6,0.6)
# ax.set_ylim(-0.6,0.6)
# ax.set_zlim(-0.6,0.6)
plt.show()






